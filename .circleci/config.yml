# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6.2 # database image for service container available at `localhost:<port>`
        environment: # environment variables for database
          POSTGRES_USER: root
          POSTGRES_DB: circletest

      - image: sharedcloud/sharedcloud:latest
        auth:
          username: sharedcloud
          password: $DOCKERHUB_PASSWORD
        environment: # environment variables for database
          DJANGO_SETTINGS_MODULE: sharedcloud.settings.ci
          PREPARE_DB: True

    working_directory: ~/sharedcloud_cli

    steps:
      - checkout
      - setup_remote_docker
      - run: sudo apt-get install -y build-essential

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io

      - run:
          name: run backend tests
          command: |
            sleep 16
            . venv/bin/activate
            nosetests -v --nocapture

      - store_artifacts:
          path: test-reports
          destination: test-reports
